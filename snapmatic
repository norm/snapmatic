from bs4 import BeautifulSoup
from datetime import datetime
import errno
import json
from optparse import OptionParser
import os
import requests
import sys
import urllib


SIGNIN_PAGE = 'https://socialclub.rockstargames.com/profile/signin'
SNAPS = 'http://socialclub.rockstargames.com/games/gtav/snapmatic/ajax/search?SearchQuery=&Filter=myphotos&Page=%s&_=1439979750279'


parser = OptionParser()
parser.add_option(
    '-d', '--use-subdirs', dest='subdirs', help='Save to timestamped subdirs',
    action='store_true')
parser.add_option(
    '-l', '--user', dest='user', help='Social Club login')
parser.add_option(
    '-m', '--metadata', dest='metadata', help='Download metadata too',
    action='store_true')
parser.add_option(
    '-o', '--directory', dest='directory', help='Output directory')
parser.add_option(
    '-p', '--password', dest='password', help='Social Club password')
parser.add_option(
    '-t', '--use-timestamp', dest='timestamp', help='Save as timestamp with ID',
    action='store_true')
parser.add_option(
    '-v', '--verbose', dest='verbose', help='Verbose activity output',
    action='store_true')
(options, args) = parser.parse_args()

login_data = {
    'login': options.user or os.getenv('SOCIALCLUB_USER'),
    'password': options.password or os.getenv('SOCIALCLUB_PASSWORD'),
}
token = None
page = 1

if login_data['login'] is None or login_data['password'] is None:
    print 'Need login and password for Social Club.'
    sys.exit(1)

session = requests.Session()
start = session.get(SIGNIN_PAGE)
soup = BeautifulSoup(start.content, 'html5lib')
form = soup.find(id='loginSlideForm')
for el in form.find_all('input'):
    if el.attrs['name'] == '__RequestVerificationToken':
        token = el.attrs['value']

if token:
    login_data['__RequestVerificationToken'] = token
    result = session.post(SIGNIN_PAGE, data=login_data)
    if not result.ok:
        print 'Error logging in.'
        sys.exit(1)

    while page is not None:
        url = SNAPS % page
        data = session.get(url)
        if not data.ok:
            print 'Error fetching photo data.'
            sys.exit(1)
        if not data.headers['content-type'].startswith('application/json'):
            print 'Not JSON fetching photo data.'
            sys.exit(1)

        photos = json.loads(data.content)
        page += 1

        if len(photos['Photos']) == 0:
            break

        for photo in photos['Photos']:
            image = photo['Meta']['ImgSrc']
            when = datetime.fromtimestamp(photo['Meta']['CreatedTimestamp'])
            filename = os.path.basename(image)
            directory = '.'
            
            if options.directory:
                directory = options.directory
            if options.subdirs:
                datedirs = when.strftime('%Y/%m/%d')
                directory = '%s/%s' % (directory, datedirs)
            if options.timestamp:
                timestamp = when.strftime('%Y-%m-%d-%H.%M.%S')
                filename = '%s.%s.jpg' % (timestamp, photo['Meta']['Id'])

            try:
                os.makedirs(directory)
            except OSError as exc:
                if exc.errno == errno.EEXIST and os.path.isdir(directory):
                    pass
                else:
                    raise

            output = '%s/%s' % (directory, filename)
            if not os.path.isfile(output):
                urllib.urlretrieve(image, output)
                if options.verbose:
                    print ' ++ ', output
            else:
                if options.verbose:
                    print '    ', output

            if options.metadata:
                output = output.replace('.jpg', '.json')
                with open(output, 'w') as file:
                    json.dump(photo, file, indent=4, sort_keys=True)
                    if options.verbose:
                        print ' ++ ', output
